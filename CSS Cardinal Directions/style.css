*,
*::before,
*::after {
  box-sizing: border-box;
}
body {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: #e1fee2;
  font-family: sans-serif;
  font-weight: 900;
  margin: 0;
  height: 100vh;
}
.box {
  --box-width: 300px;
  border-radius: 16px;

  box-shadow: 0 2.2px 2.2px rgba(0, 0, 0, 0.068),
    0 5.3px 5.3px rgba(0, 0, 0, 0.093), 0 10px 10px rgba(0, 0, 0, 0.103),
    0 17.9px 17.9px rgba(0, 0, 0, 0.11), 0 33.4px 33.4px rgba(0, 0, 0, 0.115),
    0 80px 80px rgba(0, 0, 0, 0.12);
  height: var(--box-width);
  overflow: hidden;
  position: relative;
  width: var(--box-width);
}
.drop {
  background: linear-gradient(#37854f, #173620);
  height: 100%;
  width: 100%;
  position: absolute;
  z-index: -1;
}
.activator {
  height: 100%;
  position: absolute;
  width: 100%;
}
/* The clip-path CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden. */

/* https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/polygon */
/* https://www.geeksforgeeks.org/css-polygon-function/ */
/* The polygon() function is an inbuilt function in CSS which is used with the filter property to create a polygon of images or text. Syntax: 
 polygon( percentage | length); */
.activator.northwest {
  clip-path: polygon(50% 50%, 0% 25%, 0% 0%, 25% 0%);
}
.activator.north {
  clip-path: polygon(50% 50%, 25% 0%, 75% 0%);
}
.activator.northeast {
  clip-path: polygon(50% 50%, 75% 0%, 100% 0%, 100% 25%);
}
.activator.east {
  clip-path: polygon(50% 50%, 100% 25%, 100% 75%);
}
.activator.southeast {
  clip-path: polygon(50% 50%, 100% 75%, 100% 100%, 75% 100%);
}

.activator.south {
  clip-path: polygon(50% 50%, 25% 100%, 75% 100%);
}

.activator.southwest {
  clip-path: polygon(50% 50%, 0% 75%, 0% 100%, 25% 100%);
}

.activator.west {
  clip-path: polygon(50% 50%, 0% 25%, 0% 75%);
}
.activator:hover {
  left: 0;
  height: 100%;
  top: 0;
  clip-path: none;
  width: 100%;
  z-index: 1;
}
.overlay {
  align-items: center;
  display: flex;
  font-size: 52px;
  height: 100%;
  justify-content: center;
  position: absolute;
  transition: clip-path 500ms cubic-bezier(0.4, 0, 0.2, 1);
  position: absolute;
  width: 100%;
  z-index: -1;
}
/* https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient */
/*The conic-gradient() CSS function creates an image consisting of a gradient with color transitions rotated around a center point (rather than radiating from the center). Example conic gradients include pie charts and color wheels. The result of the conic-gradient() function is an object of the <gradient> data type, which is a special kind of <image>  */
.overlay.northwest {
  background: conic-gradient(from -0.125turn, #ffe000, #799f0c 1turn);
}

.overlay.north {
  background: conic-gradient(from 0turn, #ffe000, #799f0c 1turn);
}

.overlay.northeast {
  background: conic-gradient(from 0.125turn, #ffe000, #799f0c 1turn);
}

.overlay.east {
  background: conic-gradient(from 0.25turn, #ffe000, #799f0c 1turn);
}

.overlay.southeast {
  background: conic-gradient(from 0.375turn, #ffe000, #799f0c 1turn);
}

.overlay.south {
  background: conic-gradient(from 0.5turn, #ffe000, #799f0c 1turn);
}

.overlay.southwest {
  background: conic-gradient(from 0.625turn, #ffe000, #799f0c 1turn);
}

.overlay.west {
  background: conic-gradient(from 0.75turn, #ffe000, #799f0c 1turn);
}
